
//----------------------------------------------Parametros por defecto

function newFunction(name, age, country){ //----Antes
    var name = name || 'Pedro';
    var age = age || 32;
    var country = country || 'MX';
    console.log(name, age, country)
}


function newFunction2(name = 'Pedro', age = 32, country = 'MX'){ //----Ecma6
    console.log(name, age, country)
}


newFunction2(); //Tomaria los valores por defecto
newFunction2('Ricardo', 23, 'CO'); //Tomaria los valores de los parametros

//Template literal
//Las plantillas de cadena de texto (template strings) son literales de texto que habilitan el uso de expresiones incrustadas. Es posible utilizar cadenas de texto de más de una línea, y funcionalidades de interpolación de cadenas de texto con ellas.

//-------------------------------------Concatenación
let hello = 'Hello';
let world = 'World';

let phrase = hello + ' ' + world;  //---Antes
console.log(phrase);

let phrase2 = `${hello} ${world}` //----Ecma6
console.log(phrase);

//-----------------------------------------------------Texto multi linea
//---Antes
let lorem = "Es es un frase que deberia ser de lorem ipsum \n"
+ "Esta es otra frase que no debo de escribir";

//Ecma6
let lorem2 = `Es es un frase que deberia ser de lorem ipsum X_x
La neta no tengo creatividad O_o`;

console.log(lorem)
console.log(lorem2)


//-----------------------------------------------------Destructuración de elementos

let person = {
    'name': 'oscar',
    'age' : 32,
    'country' : 'MX'
}
//Acceso de los elementos que queramos
//Antes
console.log(person.name, person.age, person.country);

//Ecma6
let {name, country} = person; //{datos que requerimos} = variable/objeto
console.log(name, country); //Solo los elementos que necesito o los que quiera


//---------------------------------------------------------------- Operador de propagación
//Nos permite expandir en ciertas situaciones varios elementos, agregar elementos en otro elemento

//Ecma6
let team1 = ['oscar', 'julian', 'ricardo'];
let team2 = ['valeria', 'jessica', 'camila'];

let education = ['david', ...team1, ...team2];
console.log(education)

//-------------------------------------------------------------------variables
//let  solamente esta disponnible en el SCOPE (dentro del bloque de codigo que va a hacer llamado)

{
    var global = 'Global var'; //Es accesible dentro y fuera del bloque
}

{
    let globalLet = 'Global Let'; //No esaccesible fuera del bloque
}

const b = 'b'; //const es una variable que no va a cambiar, no se puede reasignar


//---------------------------------------------------------------------------objetos

let name = 'alex';
let age = 22;

//Antes para crear un objeto con estos elementos
objeto = {name: name, age: age};

//Ecma6
objeto2 = {name, age}; //Se asignan al objeto sin ningun inconveniente
console.log(objeto2)


//------------------------------------------------------------------------Arrow functions
// Sintaxis mas reducida y un this no vinculable
//Las Arrow functions son funciones anonimas
const names = [
    {name: 'alex', age: 22,},
    {name: 'jessica', age: 23,}

];

//Función normal
let lisOfNames = names.map(function(item){
    console.log(item.name);
})

//Arrow function forma 1
let lisOfNames2 = names.map(item => console.log(item.name));

const lisOfNames3 = (name, age, country) => {
    //... Bloque de codigo
}

//Arrow function forma 2
const lisOfNames4 = name => {
    //...  Bloque de codigo
}

//Arrow function forma 3 No resive parametros
const lisOfNames4 = () => {
    //...  Bloque de codigo
}


//Arrow function forma 4
const square = num => num * num; //square = parametro => multiplicacion del mismo parametro


//------------------------------------------------------------------------Promesas
//Se utilizan para utilizar el asincronismo
//En algun momento o tiempo va a suceder algo que nosotros estamos estableciendo

const helloPromise = () =>{ //Se asigna un arrow function
    //Dos parametros que indica si se resolvio o se rechazo
    return new Promise((resolve, reject)=>{ //Retorna una promesa
    //Va a hacer una validación
        if(true){
            resolve('Hey!')
        }
        else{
            reject('Ups!!')
        }
    });
}

helloPromise() //Mandamos a llamar la función
 .then(response => console.log(response)) //Nos permite obtener esa respuesta positiva
 .then(() => console.log('hola')) //En una promesa podemos anidar elementos then
 .catch(error => console.log(error)) //Nos permite obtener el error o el rechazo


//-----------------------------------------------------------------clases

class Calculator{
    constructor(){
        this.valueA = 0;
        this.valueB = 0;
    }
    sum(valueA, valueB){
        this.valueA= valueA;
        this.valueB= valueB
        return this.valueA + this.valueB
    }
}

const calc = new Calculator();
console.log(calc.sum(2,2))

//------------------------------------------------------------------Modulos import/export

//Simulando estar en otro archivo
//---------------------------------------------------
const hello = () => {
    return 'hello!'
}

export default hello; //va a poder ser exportado este modulo en donde sea requerido 

//-----------------------------------------------------
//Para importar el bloque de codigo utilizamos

import {hello} from './nombre de la carpeta que se encuentra ubicada';

hello(); //Y así ya seria una función disponible dentro de este documento


//----------------------------------------------------------------------Generators
//Es una función especial que retorna una serie de valores según el algoritmo definido
//función que se puede pausar o detener para ser usada mas tarde
//manteniendo el mismo contexto donde se le dejo anteriormente.

function* helloWorld(){
    if(true){
        yield 'Hello, ';
    }
    if(true){
        yield 'World';
    }
}

const generatorHello = helloWorld();
console.log(generatorHello.next().value)
console.log(generatorHello.next().value)
console.log(generatorHello.next().value)

//-----------------------------------------------------------------------ECMAS7 2016

//------------------------------------------------------------------------includes
//Trabaja sobre un arreglo o un string y nos permite saber si hay un elemento dentro de este.

let numbers = [1,2,3,7,8];

if(numbers.includes(7)){
    console.log('Si se encuentra el valor 7')
}
else{
    console.log('No se encuentra!')
}

//-------------------------------------------------------------------------potencia

let base = 4;
let exponente = 3;

let resultado = base ** exponente;
console.log(resultado);



//-----------------------------------------------------------------------ECMAS8 2017
//-------------------------------------------------------------------Object.entries()
// Nos permite devolver la clave y los valores de una matriz

const data = {
    frontend: 'Oscar',
    backend: 'Isabel',
    design: 'Ana',
}

const matriz = Object.entries(data); //Arreglo de arreglos
console.log(matriz); //Arreglos de strings
console.log(matriz.length); //Para saber cuantos elementos hay.

//-------------------------------------------------------------------Object.values()
//Devuelve los valores de un objeto a un arreglo sin los keywords

const data = {
    frontend: 'Oscar',
    backend: 'Isabel',
    design: 'Ana',
}

const values = Object.values(data); 
console.log(values);
console.log(values.length);

//----------------------------------------------------------------------padin
//Sirve para anteponer o agregar una cadena vacia o elementos a un string
//Nos sirve para mostrar una estructura de elementos, una lista de un menu, los productos que vas a comprar y lo necesitamos presentar visualmente para la impresion
const string = 'hello';
console.log(string.padStart(7, 'hi'));
console.log(string.padEnd(12, ' -----'));
console.log('food'.padEnd(12, ' -----'));

//---------------------------------------------------------------------Async Await
//Ser mas claros a la hora de construir este tipos de funciones
//Trabaja de mejor manera con el asincronismo

const helloWorld = () => {
    return new Promise((resolve, reject) => {
        (true) 
        ? setTimeout(()=> resolve('Hello World'),3000) 
        : reject(new Error('Test Error'))
    })
}

const helloAsync = async () => {
    const hello = await helloWorld();
    //const hello = await otraFuncion();
    console.log(hello);
}

helloAsync();

const anotherFunction = async () => {
    try{
        const hello = await helloWorld();
        console.log(hello);
    }
    catch(error){
        console.log(error)
    }
}

anotherFunction();

//----------------------------------------------------------------------------Ecma9 2018

//----------------------------------------------------------------------Operador de reposo
//Puede extraer las propiedades de un objeto que aun no se ha construido ..all
//encapsula los datos que no queremos mostrar

const objeto = {
    name: 'oscar',
    age : 32,
    country : 'MX',
}

let {name, ...all} = objeto
console.log(name, all)
console.log(all)

//---------------------------------------------------------Propiedades de propagación
//Vamos a poder unir uno o varios elementos queramos de objetos a un nuevo objeto

const objeto = {
    name: 'oscar',
    age : 32,
    
}

const objeto2 = {
    ...objeto,
    country : 'MX',
}

console.log(objeto2) // Un nuevo objeto basado en la composicion de los 2 elementos


//------------------------------------------------------------------Promise.finally
//Podemos saber cuando a terminado el llamado y poder ejecutar una función o logica de codigo según sea el caso

const helloWorld = () => {
    return new Promise((resolve, reject)=>{
        (true)
        // ? resolve('Hello World')
        ? setTimeout(()=>resolve('Hello World'), 3000)
        : reject(new Error('Test Error'))
    })
}

helloWorld()
    .then(response => console.log(response))
    .catch(error => console.log(error))
    .finally(()=> console.log('Finalizo'))

//---------------------------------------------------------------------------------------RegEx
//Como podemos agrupar bloques de regex y poder acceder a cada uno de ellos

//esta va a hacer la constitución de como vamos a manejar las fechas año, mes, dia

const regexData= /([0-9]{4})-([0-9]{2})-([0-9]{2})/
const match = regexData.exec('2018-04-20')
const year = match[1]
const month = match[2]
const day = match[3]

console.log(year, month, day)

//Todavia se puede simplificar con .groups
//Para hacer uso de esto debemos exponer un ?<nombre> en el grupo que queremos nombrar de nuestro RegEx. Todos los grupos nombrados los podremos acceder en un objeto que estara en la llave groups del resultado de match.

const regexDta2 = /(?<year>[0-9]{4})-(?<month>[0-9]{2})-(?<day>[0-9]{2})/
const match2 = regexDta2.exec('2018-04-22')
const {year, month, day } = match2.groups;
console.log(year, month, day)

//-Con destructuring
const dateString = '2020-04-20'
const dateRegex3 = /([0-9]{4})-([0-9]{2})-([0-9]{2})/
const [,year,month, day] = dateRegex3.exec(dateString)||[]
console.log(`day: ${day}, month: ${month}, year: ${year}`)



//---------------------------------------------------------------------------Ecma 10 2019
//----------------------------------------------------------------------------array.flat()

let array = [1,2,3, [1,2,3, [1,2,3]]]; //Estructura para crear una pequeña matriz

//.flat nos permite devolver una matriz con cualquier submatriz aplanada
//flat() recibe de parametro la profundidad pero si no se coloca parametro se imprime solo 1 nivel
console.log(array.flat())
console.log(array.flat(1))
console.log(array.flat(2))

//----------------------------------------------------------------------------flatMap()
//Permite mapear cada elemento después pasarle una función y aplanarlo segun el resultado

let array = [1,2,3,4,5]

console.log(array.flatMap(value => [value, value*2]));
//----------------------------------------------------------------------------trimStart()
//Me va a permitir eliminar los espacios en blanco de un string

let hello = '            hello world'
console.log(hello);
console.log(hello.trimStart());
//----------------------------------------------------------------------------trimEnd()
//Me va a permitir eliminar los espacios en blanco al final de un texto
let hello2 = 'hello world                             '
console.log(hello2);
console.log(hello2.trimEnd());

//----------------------------------------------------------------------optional catch 
//Podemos pasar de manera opcional el parametro de error al valor de catch, por lo cual ya va a estar disponible el error dentro del bloque del catch

try{

}
// catch(error){
catch{
    error

}
//------------------------------------------------------------------------fromEntries()
//El cual va a transformar clave valor en un objeto, esto sirve cuando estamos trabajando con arreglos y quieras transformalos en objetos

let entries = [["name", "oscar"],["age", 32]]
console.log(Object.fromEntries(entries))

//--------------------------------------------------------------Objeto de tipo simbolo
//Nos permite acceder a una descripción

let mySymbol = `My Symbol`;
let symbol = Symbol(mySymbol);
console.log(symbol.description);

//--------------------------
//Termino Es.nes se le hace referencia a la proxima version que sera incorporada al lenguaje
//TC39 Es el comite que se encarga de esto el cual es un grupo de desarrolladores e implementadores que estan a cargo de revisar cada una de las propuestas y que cumpla el estandar que se implica
//https://tc39.es/


//Estados que debe de pasar una propuesta
//Stages:
//0.- Idea
//1.- Proposal / Propuesta
//2.- Draft / Borrador
//3.- Candidate / Candidato
//4.- Ready / Listo



//----------------------------------------------------------------------Clases

class Persona{
    constructor(nombre, apellido, altura){
        tthis.nombre = nombre;
        this.apellido = apellido;
        this.altura = altura;
    }
    saludar(){
        console.log("hola")
    }
    soyAlto(){
        return this.altura >1.8
    }
}

class Desarrollador extends Persona{
    cosntructor(nombre, apellido, altura){
        super(nombre, apellido, altura)
    }

    saludar(){
        console.log("Hello friend");
    }
}

var persona1 = new Persona('Erika', 'Leonida', 1.72)
var persona2 = new Persona('Chung', 'Lee', 1.66)
